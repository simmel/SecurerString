apply plugin: 'java'
apply plugin: 'maven-publish'
defaultTasks 'build'

repositories.mavenCentral()

group = "se.soy.${project.name.toLowerCase()}"
version = "1.1"
ext {
  url = "https://github.com/simmel/${project.name}"
  gitRepo = "git@github.com:simmel/${project.name}.git"
  pomFile = file("$project.buildDir/pom.xml")
}

dependencies.testCompile 'junit:junit:4.+'

model {
  tasks.generatePomFileForJarPublication {
    destination = project.pomFile
  }
}

test {
  systemProperty "temporaryDir", "${temporaryDir}"
  reports.junitXml.enabled = false
  reports.html.enabled = false
  forkEvery 1
  maxParallelForks Runtime.getRuntime().availableProcessors();
}

task sourceJar (type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar (type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

afterEvaluate {
  task publish (dependsOn: publishing.publications.jar.artifacts + generatePomFileForJarPublication, overwrite: true) << {
    // FIXME: Why is project. needed? It should work without:
    // http://www.gradle.org/docs/current/userguide/tutorial_this_and_that.html#sub:checking_for_project_properties
    if (!project.hasProperty('repo') && !project.hasProperty('repositoryId')) {
      println "NOTE: repo and repositoryId isn't specified, so deploying locally."
      println "NOTE: Usage, e.g: gradle -Prepo=https://oss.sonatype.org/content/repositories/snapshots -PrepositoryId=sonatype-nexus-snapshots"
      ext.repo = "file://repo"
      ext.repositoryId = ""
    }

    publishing.publications.jar.artifacts.each {
      def m = it.file =~ /.*-([a-z]+?)\..*$/
      def command = ["mvn", "-f", project.pomFile, "gpg:sign-and-deploy-file", "-DpomFile=${project.pomFile}", "-Dfile=${it.file}", "-Durl=${repo}", "-DrepositoryId=${repositoryId}"]
      if (m) {
        command << "-Dclassifier=${m[0][1]}"
      }

      exec {
        commandLine command
      }
    }
  }
}

publishing {
  publications {
    jar(MavenPublication) {
      from components.java

      artifact (sourceJar) {
        classifier = 'sources'
      }
      artifact (javadocJar) {
        classifier = 'javadoc'
      }

      pom.withXml {
        asNode().children().last() + {
          resolveStrategy = Closure.DELEGATE_FIRST
          parent {
            resolveStrategy = Closure.DELEGATE_ONLY
            groupId 'org.sonatype.oss'
            artifactId 'oss-parent'
            version '7'
          }
          name project.name
          description 'a "String" library for shredding sensitive data after use'
          url url
          packaging 'jar'
          scm {
            url project.gitRepo
            connection "scm:${project.gitRepo}"
            developerConnection "scm:${project.gitRepo}"
          }
          licenses {
            license {
              name 'ISC license'
              url 'https://www.isc.org/downloads/software-support-policy/isc-license/'
              distribution 'repo'
            }
          }
          developers {
            developer {
              id 'simmel'
              name 'Simon LundstrÃ¶m'
              email 'simmel@soy.se'
            }
          }

          build {
            plugins {
              plugin {
                resolveStrategy = Closure.DELEGATE_ONLY
                groupId 'org.apache.maven.plugins'
                artifactId 'maven-gpg-plugin'
                version '1.1'
                configuration {
                  useAgent 'true'
                  executable 'src/build/scripts/gpg'
                }
              }
            }
          }
        }
      }
    }
  }
}

jar.manifest.attributes 'Main-Class': "${group}.${project.name}"
